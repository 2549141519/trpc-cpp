// Code generated by protoc trpc plugin. DO NOT EDIT.
// source: {{ .ProtoFileName }}

#include "{{ replaceSuffix .ProtoFileName ".proto" ".trpc.pb.h" }}"
#include "trpc/server/rpc_async_method_handler.h"
#include "trpc/server/rpc_method_handler.h"
#include "trpc/server/stream_rpc_async_method_handler.h"
#include "trpc/server/stream_rpc_method_handler.h"

{{- $namespaces := (split .PackageName ".") }}
{{ range $val := $namespaces }}
namespace {{$val}} {
{{- end }}

{{ if gt len(.Services) 0 }}
namespace {

const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[{{ len(.Services) }}];
void InitServiceDescriptorsOnce() {
  static std::once_flag f;
  std::call_once(f, [] {
    auto file = ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName({{ .ProtoFileName }});
    if (file == nullptr) {
      TRPC_LOG_ERROR("Load pb descriptor failed, options feature will be disabled.");
      for (int i = 0; i < {{ len(.Services) }}; ++i) {
        file_level_service_descriptors[i] = nullptr;
      }
      return;
    }
    for (int i = 0; i < file->service_count(); ++i) {
      file_level_service_descriptors[i] = file->service(i);
    }
  });
}
const ::google::protobuf::ServiceDescriptor* InnerGetServiceDescriptor(int index) {
  InitServiceDescriptorsOnce();
  return file_level_service_descriptors[index];
}

}  // namespace
{{ end }}{{/* end if */}}

{{ range $svc_idx, $service := .Services -}}
{{ $svcName := $service.Name -}}

static const std::vector<std::vector<std::string_view>> {{ $svcName }}_method_names = {
  {{- range $service.RPCs }}
  { {{- if (ne .MethodAlias "")}}"{{.MethodAlias}}", {{ end -}}{{/* end of if MethodAlias!="" */}}
  {{- range $ext := .CppExts }}"{{$ext}}", {{ end -}}{{/* end of range cpp exts */}}
  "{{ .FullyQualifiedCmd }}" },{{ end }}{{/* end of $service.RPCs range */}}
};

{{ $svcName }}::{{ $svcName }}() {
  {{- range $idx, $val := $service.RPCs -}}
  {{- $methodName := $val.Name -}}
  {{- $rpcReqType := $val.RequestType -}}
	{{- $rpcRspType := $val.ResponseType -}}

  for (const std::string_view& method : {{ $svcName }}_method_names[{{ $idx }}]) {
    {{- if and .ClientStreaming (not .ServerStreaming) }}{{/*ClientStreaming*/}}
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::CLIENT_STREAMING, new ::trpc::StreamRpcMethodHandler<{{ $rpcReqType }}, {{ $rpcRspType }}>(std::bind(&{{ $svcName }}::{{ $methodName }}, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
    {{- else if and .ServerStreaming (not .ClientStreaming) }}{{/*ServerStreaming*/}}
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::SERVER_STREAMING, new ::trpc::StreamRpcMethodHandler<{{ $rpcReqType }}, {{ $rpcRspType }}>(std::bind(&{{ $svcName }}::{{ $methodName }}, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
    {{- else if and .ServerStreaming .ClientStreaming }}{{/*BidiStreaming*/}}
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::BIDI_STREAMING, new ::trpc::StreamRpcMethodHandler<{{ $rpcReqType }}, {{ $rpcRspType }}>(std::bind(&{{ $svcName }}::{{ $methodName }}, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
    {{- else }}{{/*Unary request*/}}
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::RpcMethodHandler<{{ $rpcReqType }}, {{ $rpcRspType }}>(std::bind(&{{ $svcName }}::{{ $methodName }}, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
    {{- end -}}{{/* end if */}}
  }

  {{- end -}}{{/* end of $service.RPCs range */}}
}

const ::google::protobuf::ServiceDescriptor* {{ $svcName }}::GetServiceDescriptor() {
  return InnerGetServiceDescriptor({{ $svc_idx }});
}

{{ range $service.RPCs -}}
{{- $rpcReqType := .RequestType -}}
{{- $rpcRspType := .ResponseType -}}
{{- $methodName := .Name -}}

{{- if and .ClientStreaming (not .ServerStreaming) }}{{/*ClientStreaming*/}}
::trpc::Status {{ $svcName }}::{{ $methodName }}(const ::trpc::ServerContextPtr& context, const ::trpc::stream::StreamReader<{{ $rpcReqType }}>& reader, {{ $rpcRspType }}* response) {
{{- else if and .ServerStreaming (not .ClientStreaming) }}{{/*ServerStreaming*/}}
::trpc::Status {{ $svcName }}::{{ $methodName }}(const ::trpc::ServerContextPtr& context, const {{ $rpcReqType }}& request, ::trpc::stream::StreamWriter<{{ $rpcRspType }}>* writer) {
{{- else if and .ServerStreaming .ClientStreaming }}{{/*BidiStreaming*/}}
::trpc::Status {{ $svcName }}::{{ $methodName }}(const ::trpc::ServerContextPtr& context, const ::trpc::stream::StreamReader<{{ $rpcReqType }}>& reader, ::trpc::stream::StreamWriter<{{ $rpcRspType }}>* writer) {
{{- else }}{{/*Unary request*/}}
::trpc::Status {{ $svcName }}::{{ $methodName }}(::trpc::ServerContextPtr context, const {{ $rpcReqType }}* request, {{ $rpcRspType }}* response) {
  (void)context;
  (void)request;
  (void)response;
{{- end -}}{{/* end if */}}
  return ::trpc::Status(-1, "");
}

Async{{ $svcName }}::Async{{ $svcName }}() : ::trpc::RpcServiceImpl() {
  {{- range $idx, $val := $service.RPCs -}}
  {{- $methodName := $val.Name -}}
  {{- $rpcReqType := $val.RequestType -}}
	{{- $rpcRspType := $val.ResponseType -}}

  for (const std::string_view& method : {{ $svcName }}_method_names[{{ $idx }}]) {
    {{- if and .ClientStreaming (not .ServerStreaming) }}{{/*ClientStreaming*/}}
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::CLIENT_STREAMING, new ::trpc::AsyncStreamRpcMethodHandler<{{ $rpcReqType }}, {{ $rpcRspType }}>(std::bind(&Async{{ $svcName }}::{{ $methodName }}, this, std::placeholders::_1, std::placeholders::_2))));
    {{- else if and .ServerStreaming (not .ClientStreaming) }}{{/*ServerStreaming*/}}
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::SERVER_STREAMING, new ::trpc::AsyncStreamRpcMethodHandler<{{ $rpcReqType }}, {{ $rpcRspType }}>(std::bind(&Async{{ $svcName }}::{{ $methodName }}, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
    {{- else if and .ServerStreaming .ClientStreaming }}{{/*BidiStreaming*/}}
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::BIDI_STREAMING, new ::trpc::AsyncStreamRpcMethodHandler<{{ $rpcReqType }}, {{ $rpcRspType }}>(std::bind(&Async{{ $svcName }}::{{ $methodName }}, this, std::placeholders::_1, std::placeholders::_2))));
    {{- else }}{{/*Unary request*/}}
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::RpcAsyncMethodHandler<{{ $rpcReqType }}, {{ $rpcRspType }}>(std::bind(&Async{{ $svcName }}::{{ $methodName }}, this, std::placeholders::_1, std::placeholders::_2))));
    {{- end -}}{{/* end if */}}
  }

  {{- end -}}{{/* end of $service.RPCs range */}}
}

const ::google::protobuf::ServiceDescriptor* Async{{ $svcName }}::GetServiceDescriptor() {
  return InnerGetServiceDescriptor({{ $svc_idx }});
}

{{ range $service.RPCs -}}
{{- $rpcReqType := .RequestType -}}
{{- $rpcRspType := .ResponseType -}}
{{- $methodName := .Name -}}

{{- if and .ClientStreaming (not .ServerStreaming) }}{{/*ClientStreaming*/}}
::trpc::Future<{{ $rpcRspType }}> Async{{ $svcName }}::ClientStreamSayHello(const ::trpc::ServerContextPtr& context, const stream::AsyncReaderPtr<{{ $rpcReqType }}>& reader) {
  return ::trpc::MakeExceptionFuture<{{ $rpcRspType }}>(::trpc::CommonException("Unimplemented"));
}
{{- else if and .ServerStreaming (not .ClientStreaming) }}{{/*ServerStreaming*/}}
::trpc::Future<> Async{{ $svcName }}::ServerStreamSayHello(const ::trpc::ServerContextPtr& context, {{ $rpcReqType }}&& request, const ::trpc::stream::AsyncWriterPtr<{{ $rpcRspType }}>& writer) {
  return ::trpc::MakeExceptionFuture<>(CommonException("Unimplemented"));
}
{{- else if and .ServerStreaming .ClientStreaming }}{{/*BidiStreaming*/}}
::trpc::Future<> Async{{ $svcName }}::BidiStreamSayHello(const ::trpc::ServerContextPtr& context, const ::trpc::stream::AsyncReaderWriterPtr<{{ $rpcReqType }}, {{ $rpcRspType }}>& rw) {
  return ::trpc::MakeExceptionFuture<>(CommonException("Unimplemented"));
}
{{- else }}{{/*Unary request*/}}
::trpc::Future<{{ $rpcRspType }}> Async{{ $svcName }}::SayHello(const ::trpc::ServerContextPtr& context, const {{ $rpcReqType }}* request) {
  return ::trpc::MakeExceptionFuture<{{ $rpcRspType }}>(::trpc::CommonException("Unimplemented"));
}
{{- end -}}{{/* end if */}}

{{- end -}}{{/* end of $service.RPCs range */}}

{{ range $idx, $val := $service.RPCs -}}
{{- $methodName := $val.Name -}}
{{- $rpcReqType := $val.RequestType -}}
{{- $rpcRspType := $val.ResponseType -}}

{{- if and .ClientStreaming (not .ServerStreaming) }}{{/*ClientStreaming*/}}
::trpc::stream::StreamWriter<{{ $rpcReqType }}> {{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context, {{ $rpcRspType }}* response) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && {{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor({{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return StreamInvoke<{{ $rpcReqType }}, {{ $rpcRspType }}>(context, response);
}
{{- else if and .ServerStreaming (not .ClientStreaming) }}{{/*ServerStreaming*/}}
::trpc::stream::StreamReader<{{ $rpcRspType }}> {{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context, const {{ $rpcReqType }}& request) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && {{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor({{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return StreamInvoke<{{ $rpcReqType }}, {{ $rpcRspType }}>(context, request);
}
{{- else if and .ServerStreaming .ClientStreaming }}{{/*BidiStreaming*/}}
::trpc::stream::StreamReaderWriter<{{ $rpcReqType }}, {{ $rpcRspType }}> {{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && {{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor({{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return StreamInvoke<{{ $rpcReqType }}, {{ $rpcRspType }}>(context);
}
{{- else }}{{/*Unary request*/}}
::trpc::Status {{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context, const {{ $rpcReqType }}& request, {{ $rpcRspType }}* response) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && {{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor({{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return UnaryInvoke<{{ $rpcReqType }}, {{ $rpcRspType }}>(context, request, response);
}

::trpc::Future<{{ $rpcRspType }}> {{ $svcName }}ServiceProxy::Async{{ $methodName }}(const ::trpc::ClientContextPtr& context, const {{ $rpcReqType }}& request) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && {{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor({{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return AsyncUnaryInvoke<{{ $rpcReqType }}, {{ $rpcRspType }}>(context, request);
}

::trpc::Status {{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context, const {{ $rpcReqType }}& request) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && {{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor({{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return OnewayInvoke<{{ $rpcReqType }}>(context, request);
}
{{- end -}}{{/* end of if streaming */}}

{{ end -}}{{/* end of $service.RPCs range */}}

{{ range $idx, $val := $service.RPCs -}}
{{- $methodName := $val.Name -}}
{{- $rpcReqType := $val.RequestType -}}
{{- $rpcRspType := $val.ResponseType -}}

{{- if and .ClientStreaming (not .ServerStreaming) }}{{/*ClientStreaming*/}}
::trpc::Future<std::pair<::trpc::stream::AsyncWriterPtr<{{ $rpcReqType }}>, ::trpc::Future<{{ $rpcRspType }}>>> Async{{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && Async{{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor(Async{{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return AsyncStreamInvoke<{{ $rpcReqType }}, {{ $rpcRspType }}>(context);
}
{{- else if and .ServerStreaming (not .ClientStreaming) }}{{/*ServerStreaming*/}}
::trpc::Future<::trpc::stream::AsyncReaderPtr<{{ $rpcRspType }}>> Async{{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context, {{ $rpcReqType }}&& request) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && Async{{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor(Async{{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return AsyncStreamInvoke<{{ $rpcReqType }}, {{ $rpcRspType }}>(context, std::move(request));
}
{{- else if and .ServerStreaming .ClientStreaming }}{{/*BidiStreaming*/}}
::trpc::Future<::trpc::stream::AsyncReaderWriterPtr<{{ $rpcRspType }}, {{ $rpcReqType }}>> Async{{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && Async{{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor(Async{{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return CreateAsyncStream<{{ $rpcReqType }}, {{ $rpcRspType }}>(context);
}
{{- else }}{{/*Unary request*/}}
::trpc::Future<{{ $rpcRspType }}> Async{{ $svcName }}ServiceProxy::{{ $methodName }}(const ::trpc::ClientContextPtr& context, const {{ $rpcReqType }}& request) {
  if (context->GetTrpcFuncName().empty()) context->SetTrpcFuncName({{ $svcName }}_method_names[{{ $idx }}][0].data());
  if (context->GetProtobufMethodDescriptor() == nullptr && Async{{ $svcName }}::GetServiceDescriptor() != nullptr) context->SetProtobufMethodDescriptor(Async{{ $svcName }}::GetServiceDescriptor()->method({{ $idx }}));
  return AsyncUnaryInvoke<{{ $rpcReqType }}, {{ $rpcRspType }}>(context, request); 
}
{{- end -}}{{/* end of if streaming */}}

{{ end -}}{{/* end of $service.RPCs range */}}

{{- end -}}{{/* end of services range */}}
{{ range $val := (reverseStringSlice $namespaces)  }}
} // end namespace {{ $val }}
{{- end }}
